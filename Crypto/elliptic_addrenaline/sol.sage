from Crypto.Util.number import bytes_to_long

p = 2**255 - 19
a = 19298681539552699237261830834781317975544997444273427339909597334573241639236
b = 55751746669818908907645289078257140818241103727901012315294400837956729358436

K = GF(p)
E = EllipticCurve([K(a), K(b)])

# P1 = A + B; P2 = A - B
P1 = E(36383477447355227427363222958872178861271407378911499344076860614964920782192, 26621351750863883655273158873320913584591963316330338897549941610801666281894)
P2 = E(35017143636654127615837925410012912090234292410137109973033835965781971515338, 55888666729705323990488128732989325970476008697224551268788692630541877244410)

# 2A = P1+P2; 2B = P1-P2
AA = P1 + P2; A = AA.division_points(2)
BB = P1 - P2; B = BB.division_points(2)

print(long_to_bytes(A[0][0]), long_to_bytes(A[1][0]))
print(long_to_bytes(B[0][0]), long_to_bytes(B[1][0]))

flag = long_to_bytes(A[1][0]) + long_to_bytes(B[0][0])
print(flag.decode())
